// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDistroParams creates a new GetDistroParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetDistroParams() *GetDistroParams {
	return &GetDistroParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetDistroParamsWithTimeout creates a new GetDistroParams object
// with the ability to set a timeout on a request.
func NewGetDistroParamsWithTimeout(timeout time.Duration) *GetDistroParams {
	return &GetDistroParams{
		timeout: timeout,
	}
}

// NewGetDistroParamsWithContext creates a new GetDistroParams object
// with the ability to set a context for a request.
func NewGetDistroParamsWithContext(ctx context.Context) *GetDistroParams {
	return &GetDistroParams{
		Context: ctx,
	}
}

// NewGetDistroParamsWithHTTPClient creates a new GetDistroParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetDistroParamsWithHTTPClient(client *http.Client) *GetDistroParams {
	return &GetDistroParams{
		HTTPClient: client,
	}
}

/* GetDistroParams contains all the parameters to send to the API endpoint
   for the get distro operation.

   Typically these are written to a http.Request.
*/
type GetDistroParams struct {

	/* DistroID.

	   desired distro

	   Format: uuid
	*/
	DistroID strfmt.UUID

	/* IncludeDetails.

	   include the manifest and formats in the response
	*/
	IncludeDetails *bool

	/* OrganizationName.

	   desired organization
	*/
	OrganizationName string

	/* ProjectName.

	   desired project
	*/
	ProjectName string

	/* ReleaseID.

	   desired release

	   Format: uuid
	*/
	ReleaseID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get distro params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDistroParams) WithDefaults() *GetDistroParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get distro params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDistroParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get distro params
func (o *GetDistroParams) WithTimeout(timeout time.Duration) *GetDistroParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get distro params
func (o *GetDistroParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get distro params
func (o *GetDistroParams) WithContext(ctx context.Context) *GetDistroParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get distro params
func (o *GetDistroParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get distro params
func (o *GetDistroParams) WithHTTPClient(client *http.Client) *GetDistroParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get distro params
func (o *GetDistroParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDistroID adds the distroID to the get distro params
func (o *GetDistroParams) WithDistroID(distroID strfmt.UUID) *GetDistroParams {
	o.SetDistroID(distroID)
	return o
}

// SetDistroID adds the distroId to the get distro params
func (o *GetDistroParams) SetDistroID(distroID strfmt.UUID) {
	o.DistroID = distroID
}

// WithIncludeDetails adds the includeDetails to the get distro params
func (o *GetDistroParams) WithIncludeDetails(includeDetails *bool) *GetDistroParams {
	o.SetIncludeDetails(includeDetails)
	return o
}

// SetIncludeDetails adds the includeDetails to the get distro params
func (o *GetDistroParams) SetIncludeDetails(includeDetails *bool) {
	o.IncludeDetails = includeDetails
}

// WithOrganizationName adds the organizationName to the get distro params
func (o *GetDistroParams) WithOrganizationName(organizationName string) *GetDistroParams {
	o.SetOrganizationName(organizationName)
	return o
}

// SetOrganizationName adds the organizationName to the get distro params
func (o *GetDistroParams) SetOrganizationName(organizationName string) {
	o.OrganizationName = organizationName
}

// WithProjectName adds the projectName to the get distro params
func (o *GetDistroParams) WithProjectName(projectName string) *GetDistroParams {
	o.SetProjectName(projectName)
	return o
}

// SetProjectName adds the projectName to the get distro params
func (o *GetDistroParams) SetProjectName(projectName string) {
	o.ProjectName = projectName
}

// WithReleaseID adds the releaseID to the get distro params
func (o *GetDistroParams) WithReleaseID(releaseID strfmt.UUID) *GetDistroParams {
	o.SetReleaseID(releaseID)
	return o
}

// SetReleaseID adds the releaseId to the get distro params
func (o *GetDistroParams) SetReleaseID(releaseID strfmt.UUID) {
	o.ReleaseID = releaseID
}

// WriteToRequest writes these params to a swagger request
func (o *GetDistroParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param distroID
	if err := r.SetPathParam("distroID", o.DistroID.String()); err != nil {
		return err
	}

	if o.IncludeDetails != nil {

		// query param includeDetails
		var qrIncludeDetails bool

		if o.IncludeDetails != nil {
			qrIncludeDetails = *o.IncludeDetails
		}
		qIncludeDetails := swag.FormatBool(qrIncludeDetails)
		if qIncludeDetails != "" {

			if err := r.SetQueryParam("includeDetails", qIncludeDetails); err != nil {
				return err
			}
		}
	}

	// path param organizationName
	if err := r.SetPathParam("organizationName", o.OrganizationName); err != nil {
		return err
	}

	// path param projectName
	if err := r.SetPathParam("projectName", o.ProjectName); err != nil {
		return err
	}

	// path param releaseID
	if err := r.SetPathParam("releaseID", o.ReleaseID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
