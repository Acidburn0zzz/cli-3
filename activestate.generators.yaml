scripts:
  - name: generate-api-client
    language: bash
    description: Generates the mono-api client files
    value: |
      WD=$(pwd)
      pushd pkg/platform/api/mono
      swagger generate client -f ${WD}/../TheHomeRepot/service/api/swagger/swagger.yaml -A mono -a mono_operations -m mono_models -c mono_client
      popd
  - name: generate-secrets-client
    language: bash
    description: Generates the secrets-api client files
    value: |
      WD=$(pwd)
      pushd pkg/platform/api/secrets
      swagger generate client -f ${WD}/../TheHomeRepot/service/secrets/api/swagger.yaml -A secrets -a secrets_operations -m secrets_models -c secrets_client
      popd
  - name: generate-headchef-client
    language: bash
    description: Generates the headchef-api client files
    value: |
      WD=$(pwd)
      pushd pkg/platform/api/headchef
      swagger generate client --with-flatten full -f ${WD}/../TheHomeRepot/service/head-chef/swagger.json -A headchef -a headchef_operations -m headchef_models -c headchef_client
      popd
  - name: generate-logstreamer-client
    language: bash
    description: Generates the buildlog-streamer client files
    value: |
      WD=$(pwd)
      pushd pkg/platform/api/buildlogstream
      swagger generate client --with-flatten full -f ${WD}/../TheHomeRepot/service/build-log-streamer/swagger.yaml -A buildlogstream -a buildlogstream_operations -m buildlogstream_models -c buildlogstream_client
      popd
  - name: generate-inventory-client
    language: bash
    description: Generates the inventory-api client files
    value: |
      WD=$(pwd)
      pushd pkg/platform/api/inventory
      swagger generate client --with-flatten full -f ${WD}/../TheHomeRepot/service/inventory-api-v1/swagger.json -A inventory -a inventory_operations -m inventory_models -c inventory_client
      popd
  - name: generate-clients
    language: bash
    description: Generates all api clients
    value: |
      $scripts.generate-api-client
      $scripts.generate-secrets-client
      $scripts.generate-headchef-client
      $scripts.generate-inventory-client
  - name: generate-locale
    language: bash
    description: Detects new localisation calls and generates placeholder entries in en-us.yaml
    value: python3 scripts/locale-generator.py
  - name: generate-update
    language: bash
    description: Generate update files
    value: |
      set -e
      $constants.SET_ENV

      TEMPDIR=$(mktemp -d)
      cp -a $BUILD_TARGET_DIR/$constants.BUILD_INSTALLER_TARGET $TEMPDIR

      BINDIR=$TEMPDIR/bin
      mkdir $TEMPDIR/bin
      cp -a $BUILD_TARGET_DIR/$constants.BUILD_DAEMON_TARGET $BINDIR
      cp -a $BUILD_TARGET_DIR/$constants.BUILD_SYSTRAY_TARGET $BINDIR
      cp -a $BUILD_TARGET_DIR/$constants.BUILD_TARGET $BINDIR

      export GOARCH=${1:-amd64}
      mkdir -p ./build/update
      if [ ! -z $constants.SYSTRAY_APP ]; then
        mkdir -p $TEMPDIR/system/$constants.SYSTRAY_APP
        cp -r $BUILD_TARGET_DIR/$constants.SYSTRAY_APP $TEMPDIR/system
      fi

      go run scripts/update-generator/main.go -o ./build/update $TEMPDIR

      rm -rf $TEMPDIR
  - name: generate-graph
    language: bash
    description: Generates graph server and client files
    value: |
      cd cmd/state-svc
      go run github.com/99designs/gqlgen
  - name: generate-test-update
    language: bash
    standalone: true
    description: |
      Generate tests update files. These can be safely uploaded to s3, and can be used to test an installation/update
    value: |
      set -e
      $constants.SET_ENV
      mkdir -p ./build/test
      mkdir -p ./build/test-update
      TEST_VERSION="99.99.9999"

      TEST_STATE_TOOL=./build/test/$constants.BUILD_TARGET
      TEST_STATE_SVC=./build/test/$constants.BUILD_DAEMON_TARGET
      TEST_STATE_TRAY=./build/test/$constants.BUILD_SYSTRAY_TARGET
      go build -o $TEST_STATE_TOOL ./internal/testhelpers/installation/fakeversioncmd
      cp -a $TEST_STATE_TOOL $TEST_STATE_SVC
      cp -a $TEST_STATE_TOOL $TEST_STATE_TRAY

      if [ ! -z $constants.SYSTRAY_APP ]; then
        TEST_AS_DESKTOP=./build/test/$constants.SYSTRAY_APP
        cp -r installers/${constants.SYSTRAY_APP} build/test/

        go run scripts/update-generator/main.go -v ${TEST_VERSION} --systemAppDir "$TEST_AS_DESKTOP" -o ./build/test-update \
          $BUILD_TARGET_DIR/$constants.BUILD_INSTALLER_TARGET \
          $TEST_STATE_TOOL $TEST_STATE_SVC \
          $TEST_STATE_TRAY
      else
        go run scripts/update-generator/main.go -v ${TEST_VERSION} -o ./build/test-update \
          $BUILD_TARGET_DIR/$constants.BUILD_INSTALLER_TARGET \
          $TEST_STATE_TOOL $TEST_STATE_SVC \
          $TEST_STATE_TRAY
      fi

      echo "compile test-channel update"
      go build -o $TEST_STATE_TOOL -ldflags "-X main.channel=test-channel" ./internal/testhelpers/installation/fakeversioncmd
      cp -a $TEST_STATE_TOOL $TEST_STATE_SVC
      cp -a $TEST_STATE_TOOL $TEST_STATE_TRAY

      if [ ! -z $constants.SYSTRAY_APP ]; then
        cp -r installers/${constants.SYSTRAY_APP} build/test/

        go run scripts/update-generator/main.go -b test-channel -v ${TEST_VERSION} --systemAppDir "$TEST_AS_DESKTOP" -o ./build/test-update \
          $BUILD_TARGET_DIR/$constants.BUILD_INSTALLER_TARGET \
          $TEST_STATE_TOOL \
          $TEST_STATE_SVC \
          $TEST_STATE_TRAY
      else
        go run scripts/update-generator/main.go -b test-channel -v ${TEST_VERSION} -o ./build/test-update \
          $BUILD_TARGET_DIR/$constants.BUILD_INSTALLER_TARGET \
          $TEST_STATE_TOOL \
          $TEST_STATE_SVC \
          $TEST_STATE_TRAY
      fi
